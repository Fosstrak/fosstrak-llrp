       ------
                                    Developer Guide - Installation
                                    ------
                                    ------


Developer Guide - Installation

* Contents
	
	[[1]] {{{#Objective}Objective}}
	
	[[2]] {{{#Prerequisites}Prerequisites}}
	
	[[3]] {{{#Setup}Setup}}
	
	[[4]] {{{#Packaging}Packaging}}
	
	[[5]] {{{#Eclipse}Eclipse}}
	
	[[6]] {{{#Site}Site}}


* {Objective}

  This document addresses users that either want to build the LLRPCommander 
  from scratch or intend to extend the LLRPCommander. The document describes 
  the basic steps to take to assemble the plugin automatically, to generate 
  eclipse projects and to create the site-documentation. Please read all the 
  steps carefully before you run the commands.
		
* {Prerequisites}

  To complete the guide you need some basic building blocks to be in place. 
  You cannot proceed if you don't have those tools at hand!

  * {{{http://java.com}Java 1.5}} or later. The LLRPCommander will not build 
  against java 3/4.

  * {{{http://maven.apache.org}Apache maven}} with version >=2.0.9. Make sure 
  you can run maven on the command line.

  * Subversion to checkout the project from the fosstrak website.

  * A fresh copy of the {{{http://eclipse.org}eclipse framework}}. 
  Make sure to retrieve eclipse >=3.3.0 with plugin support (we advice you to 
  download the Java EE version of eclipse). 



* {Setup}
  
  [[]] Checkout the latest version from the fosstrak subversion directory or 
  download the source package from the fosstrak website.
  
  [[]] Unpack the eclipse package to a location of your choice. 
  
+---+
example Windows:
   c:\eclipseBuild

example *nix:
   /opt/eclipseBuild
+---+
   
  [[]] Open the project descriptor in llrp-commander/pom.xml and scroll down to 
  the part "eclipseInstall". The directive has to point to your eclipse package.

+---+
example Windows:
   <eclipseInstall>c:\eclipseBuild</eclipseInstall>

example *nix:
   <eclipseInstall>/opt/eclipseBuild</eclipseInstall>
+---+

   There should be several 
   directives present. Choose the one that fits to your needs or adapt one 
   manually. Make sure the correct directive is uncommented and that there 
   is only one directive uncommented.
   
   Currently we use the maven-pde-plugin from    
  {{{http://mojo.codehaus.org/pde-maven-plugin/}Codehaus}}. The eclipse 
  osgi-bundles are not stored in a public maven repository, so the 
  pde-maven-plugin refers to the offline dependencies stored in the eclipse 
  checkout we installed before (Those dependencies also contain the plugin 
  compiler/assembler from the eclipse project that we use to compile the 
  plugin as an eclipse plugin). Hopefully there will be a better and more 
  flexible solution available in the future...
   
  
* {Packaging}

  To generate the eclipse plugin automatically open a command shell and 
  navigate to the folder where you have the source code installed.
  
+---+
example Windows:
   cd c:\workspace-fosstrak\llrp
   
example *nix: 
   cd ~/workspace-fosstrak/llrp
+---+

  Run the command "mvn package". If you run the command for the first time 
  maven will have to download and install all the missing dependencies for the 
  plugin. This can take a while, so go and have a coffee-break.
  
  You will find the assembled package in the folder llrp-commander/.
  
** Pitfalls

  * Dont use the command "mvn compile". Sometimes this command messes up with 
  the eclipse dependencies and therefore generates a cryptic error message.
  
  * Maven copies many files into the plugin directory. There is nothing wrong 
  about this. When you run "mvn clean" those files disappear again. Be aware 
  that for the packaging those files are mandatory.
    
    
* {Eclipse}

 Maven can generate eclipse projects for you from the maven project descriptor.
  
+---+
mvn eclipse:eclipse -DM2_REPO="<PATH_TO_MAVEN_REPO>"

example Windows:
   mvn eclipse:eclipse -DM2_REPO="~/.m2/repositories"

example *nix:
   mvn eclipse:eclipse -DM2_REPO="c:\Users\example\.m2\repositories"
+---+
 
  If you omit the directory directive you can always specify the global 
  classpath variable in the eclipse preferences. 
  
  Import the generated project in eclipse project-navigator.
  
  If you want to clean out the eclipse projects run:

+---+
mvn eclipse:clean
+---+
  
** Pitfalls

  Sometimes maven screws up the plugin manifest when you run the eclipse 
  project generation command. Then you basically have two approaches to fix 
  the manifest:
  
  [[]] Revert the llrp-commander/META-INF/MANIFEST.MF back to the checkout from the
subversion 
  repository.
  
  [[]] Open the llrp-commander/META-INF/MANIFEST.MF in the eclipse editor and fix 
  it by hand. Navigate to the tab "runtime". There add the missing  dependencies
  and save the changed manifest.
 
 
* {Site}

  Maven can generate the documentation from the apt-files within the src/site 
  folder together with a complete documentation of the java-source code 
  (javadoc).
  
+---+
mvn site:stage -DstagingDirectory="<SOME_DIRECTORY>"

example Windows:
  mvn site:stage -DstagingDirectory="c:\fosstrakSites"
  
example *nix:
   mvn site:stage -DstagingDirectory="/tmp/fosstrakSites"
+---+