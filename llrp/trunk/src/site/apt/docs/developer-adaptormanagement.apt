       ------
                                    Developers guide - Adaptor Management
                                    ------
                                    ------


Developers guide - Adaptor Management

* Content
	
	[[1]] {{{#Overview}Overview}}
	
	[[2]] {{{#Initialization}Initialization}}
	
	[[3]] {{{#Shutdown}Shutdown}}
	
	[[4]] {{{#Definition}Definition}}
	
	[[5]] {{{#Undefinition}Undefinition}}
	
	[[6]] {{{#Enqueuing}Enqueuing}}
	
	[[7]] {{{#MessagePosting}MessagePosting}}
	
	[[8]] {{{#ExceptionPosting}ExceptionPosting}}
	
	[[9]] {{{#LoadFromFile}LoadFromFile}}
	
	[[10]] {{{#StoreToFile}StoreToFile}}
	
	[[11]] {{{#ExceptionHandler}ExceptionHandler}}
	
	[[12]] {{{#Repository}Repository}}
	
	[[13]] {{{#Sample}Sample}}
	
	[[14]] {{{#Multithreading}Multithreading}}
	

* {Overview}

	This chapter shall give an overview to the adaptor management 
	providing access to adaptors and readers. The behaviour of the 
	adaptor management is explained by explaining the most important 
	methods and their behaviour.
	
	This includes:
	
	* error management
	
	* message management
	
	* concurrency
	
	* adaptor management
	
	* configuration management
		
	
* {Initialization}

+---+
public boolean initialize(
		String readConfig, 
		String storeConfig,
		boolean commitChanges,
		LLRPExceptionHandler exceptionHandler,
		Repository repository) 
	throws LLRPRuntimeException { ... }
+---+
	
	It is <<very important>> to initialize the adaptor management properly. 
	For this task the initialize method is provided. 
	
	The first two parameters tell the adaptor management where to read 
	or write the configuration.
	
	If you want the adaptor management to run a snapshot configuration 
	set the flag <<<commitChanges>>> to true. If so, all the changes 
	to the adaptors and to the readers in the local adaptors will be 
	reflected <<immediately>> back into the configuration file.
	
	The exception handler and the repository are responsible for 
	error and message reporting. If you set them to <<null>> you will 
	have to use the corresponding setters to specify them in a later 
	phase.
	
	
* {Shutdown}

+---+
public synchronized void shutdown() { ... }
+---+
	
	If you shutdown your client, it is best to run this method to 
	shutdown the adaptor management. This method performs several 
	cleanup routines, stores the configuration and stops the 
	worker threads.
	
	
	
	
* {Definition}
	
+---+
public synchronized String define(String adaptorName, String address) 
	throws LLRPRuntimeException, RemoteException, NotBoundException { ... }
+---+	

	In a first step the adaptor management inspects the address parameter. 
	If this parameter is set to <<null>> the adaptor is assumed to be 
	a local adaptor. Otherwise the address is considered to be a valid 
	ip address of a remote rmi machine.
	 
	In the case where the address is not <<null>> the adaptor management 
	tries to establish an rmi connection to the specified ip address 
	and tries to aquire the adaptor from the rmi registry. Please 
	notice that in the remote case the adaptorName you provided will 
	be overridden by the name of the remote adaptor.
	
	Then the management makes sure that in the local repository no 
	other adaptor with the same name exists.
	
	In order to receive asynchronous messages from the adaptor and 
	therefore also from the readers a asynchronous callback receiver 
	has to be installed. The adaptor management uses the class 
	<<<AdaptorCallback>>> for this purpose.
	
	If all the previous steps have been performed successfully a new 
	worker thread is created and started. The thread takes over the 
	control of the adaptor.
	
	
	
	
* {Undefinition}
	
+---+
public synchronized void undefine(String adaptorName) 
    throws LLRPRuntimeException { ... }
+---+

	The adaptor management stops the worker thread, deregisters the 
	asynchronous callback and removes the adaptor from the adaptor 
	list.




* {Enqueuing}

+---+
public void enqueueLLRPMessage(String adaptorName, 
                       String readerName, 
                       LLRPMessage message) 
                       throws LLRPRuntimeException { ... }
+---+
	
	In order to simplify the sending of an LLRPMessage the adaptor 
	management provides a short-cut. When you post an LLRPMessage 
	together with the readerName and the adaptorName the 
	adaptor management will select the correct adaptor and send 
	the message asynchronously to the specified reader. One of the 
	main advantages of this procedure is that you do not have 
	to wait for the message to be sent. 




* {MessagePosting}

+---+
public void postLLRPMessageToRepo(LLRPMessageItem message) { ... }
+---+
	
	If an LLRPMessage arrived on any of the adaptors, this 
	method can be invoked. The adaptor management then takes 
	care of the delivery of the message to the repository.
	
	This also ensures, that if the repository has not been set 
	correctly in advance, the error message will be posted 
	to the error logger.
	
	
	
	
* {ExceptionPosting}

+---+
public void postException(
		LLRPRuntimeException e, 
		LLRPExceptionHandlerTypeMap 
		exceptionType, 
		String adapterName, 
		String readerName) 
{ ... }
+---+
	
	Whenever an error occurs the clients (adaptors, readers...) can 
	invoke this method. If an exception handler has been installed 
	during setup of the adaptor management, an exception is constructed 
	and is delivered to this exception handler. 
	
	In case that the exception handler is not set, an error is 
	reported to the error logger.
	
	
	
	
* {LoadFromFile}
	
+---+
public synchronized void loadFromFile() 
    throws LLRPRuntimeException { ... }
+---+

	The adaptor management gives the possiblity to retrieve the 
	adaptors/readers from file. For the storage of the configuration 
	the <<<java.util.Properties>>> are used.
	
	
	
* {StoreToFile}

+---+
public synchronized void storeToFile() throws LLRPRuntimeException { ... }
+---+
	
	As with loadFromFile this method stores a configuration to a 
	configuration file on disc.
	
	
	
	
* {ExceptionHandler}

+---+
public void setExceptionHandler(LLRPExceptionHandler exceptionHandler) { ... }
+---+
	
	In order to receive asynchronous exceptions from the adaptors and 
	the readers you will have to set an exception handler. If you did 
	not set the handler during initialization you can use this 
	helper method to perform this task.
	
	
	
* {Repository}
	
+---+
public void setRepository(Repository repository) {
+---+
	
	In order to receive LLRP messages in the LLRP GUI Client the 
	respective message repository has to be specified. If you did 
	not set the repository during initialization you can use this 
	helper method to perform this task.

	
* {Sample}

+---+
// create a message repository
Repository repository = new MessageRepository();

// create an exception handler
ExceptionHandler handler = new ExceptionHandler();

// run the initializer method
String readConfig = Utility.findWithFullPath("/readerDefaultConfig.properties");
String writeConfig = readConfig;
boolean commitChanges = true;
AdaptorManagement.getInstance().initialize(
    readConfig, storeConfig, commitChanges, handler, repo);

// now the management should be initialized and ready to be used

// create an adaptor
String adaptorName = "myAdaptor";
AdaptorManagement.getInstance().define(adaptorName, "localhost");

// create a reader
String readerName = "myReader";
Adaptor adaptor = AdaptorManagement.getAdaptor(adaptorName);
adaptor.define(readerName, "192.168.1.23", 5084, true, true);

//Enqueue some LLRPMessage on the adaptor
AdaptorManagement.enqueueLLRPMessage(adaptorName, readerName, message);

// when you shutdown your application call the shutdown method
AdaptorManagement.getInstance().shutdown();
+---+





* {Multithreading}

	The LLRP GUI Client allows several adaptors to be run simultaneously, 
	therefor the AdaptorManagement needs some mechanisms to support a 
	parallel execution of different adaptors.
	
	Each adaptor runs on a thread <<<AdaptorWorker>>>. Each thread 
	maintains a callback for the asynchronous message callback.
	
[../images/developer/workerThread.png]
	WorkerThread


